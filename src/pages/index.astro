---
import Layout from "../layouts/Layout.astro";
import PlotFigure from "../components/PlotFigure.astro";
import Section from "../components/Section.astro";
import SectionFullWidth from "../components/SectionFullWidth.astro";
import InteractiveMap from "../components/InteractiveMap.astro";


import penguins from "../assets/penguins.json";
import * as Plot from "@observablehq/plot";
---


<Layout>
  <div class="scroll-container">
    <div class="horizontal-sections">
    <!-- Page 1 : Accueil -->
<SectionFullWidth title="">
  <div class="grid grid-cols-2 w-full h-full gap-0 max-[800px]:grid-cols-1 max-[800px]:gap-8">
    <!-- Hero Left -->
    <div class="flex items-center justify-center p-16 max-[900px]:p-12 max-[800px]:p-8">
      <div class="max-w-[550px] flex flex-col gap-8 max-[900px]:gap-6 max-[800px]:max-w-full">
        <h1 class="text-[clamp(2.5rem,8vw,4.5rem)] font-semibold leading-none m-0 text-black max-[1200px]:text-[3.5rem] max-[900px]:text-[3rem] max-[800px]:text-center max-[800px]:text-[2.5rem]">
          Santé en<br/>
          <span class="bg-gradient-to-r from-[rgb(255,140,66)] to-[rgba(255,140,66,0.7)] bg-clip-text text-transparent">
            Franche-Comté
          </span>
        </h1>
        
        <p class="text-[clamp(1rem,3vw,1.5rem)] font-light text-black/70 m-0 max-[1200px]:text-[1.3rem] max-[900px]:text-[1.15rem] max-[800px]:text-center max-[800px]:text-[1rem]">
          Visualiser l'accès aux professionnels
        </p>
        
        <div class="flex flex-col gap-5 max-[900px]:gap-4">
          <p class="text-[clamp(0.9rem,2vw,1.05rem)] font-light leading-relaxed text-black/85 m-0 max-[1200px]:text-[0.95rem] max-[900px]:text-[0.9rem] max-[800px]:text-[0.85rem]">
            Explorez l'accès aux professionnels de santé en Franche-Comté à travers des visualisations interactives, afin de comprendre où l'offre est la plus ou la moins accessible pour les habitants.
          </p>
          <p class="text-[clamp(0.9rem,2vw,1.05rem)] font-light leading-relaxed text-black/85 m-0 max-[1200px]:text-[0.95rem] max-[900px]:text-[0.9rem] max-[800px]:text-[0.85rem]">
            Analysez la quantité de professionnels (médecins généralistes, infirmiers, kinésithérapeutes, sages-femmes) et l'accessibilité potentielle localisée, avant et après la période Covid.
          </p>
        </div>
      </div>
    </div>
    
    <!-- Hero Right - Video -->
    <div class="relative overflow-hidden w-full h-full max-[800px]:hidden">
      <div class="relative w-full h-full">
      <video class="w-full h-full object-cover object-center block" autoplay loop muted playsinline>
        <source src="/videos/video_hero_sae303.mp4" type="video/mp4" />
        Votre navigateur ne supporte pas la vidéo.
      </video>
      </div>
    </div>
  </div>
</SectionFullWidth>


<!-- Page 2 : Carte -->
<Section title="Accessibilité aux soins en Franche-Comté">
  <div slot="left" class="max-[800px]:flex max-[800px]:justify-center">
    <InteractiveMap dataUrl="/data/communes_fc_colored_dynamic.json" />
  </div>
  
  <!-- REMPLACEZ span-two-cols par col-span-2 + classes Tailwind -->
  <div class="col-span-2 flex flex-col justify-start gap-2.5 pt-24 max-[1200px]:pt-15 max-[1024px]:pt-1 max-[800px]:col-span-1 max-[800px]:gap-2.5 max-[600px]:gap-2">
    <!-- Bloc Explication APL -->
    <div class="bg-white/5 p-3.5 rounded-lg border-l-[3px] border-[rgb(255,140,66)] max-[800px]:p-3 max-[600px]:p-2">
      <h3 class="text-[1.2rem] font-semibold text-black mb-1.5 max-[800px]:text-sm max-[800px]:mb-1 max-[600px]:text-xs">
        Explication (APL)
      </h3>
      <p class="text-[1.1rem] max-[1600px]:text-[0.85rem] leading-[1.35] text-black/85 text-justify m-0 tracking-[-0.05em] max-[800px]:text-[0.72rem] max-[800px]:leading-[1.3] max-[600px]:text-[0.68rem]">
        L'indicateur d'accessibilité potentielle localisée (APL) a été développé pour mesurer l'adéquation spatiale entre l'offre et la demande de soins de premier recours à un échelon géographique fin. C'est un indicateur local, disponible au niveau de chaque commune, qui tient compte de l'offre et de la demande issues des communes environnantes. Calculé à l'échelle communale, l'APL met en évidence des disparités d'offre de soins qu'un indicateur usuel de densité, calculé sur des mailles beaucoup plus larges, aurait tendance à masquer. Il tient également compte du niveau d'activité des professionnels en exercice ainsi que de la structure par âge de la population de chaque commune qui influence les besoins de soins.
      </p>
    </div>

    <!-- Bloc Explication carte -->
    <div class="bg-white/5 p-3.5 rounded-lg border-l-[3px] border-[rgb(255,140,66)] max-[800px]:p-3 max-[600px]:p-2">
      <h3 class="text-[1.2rem] font-semibold text-black mb-1.5 max-[800px]:text-sm max-[800px]:mb-1 max-[600px]:text-xs">
        Explication de la carte & sources
      </h3>
      <p class="text-[1.1rem] max-[1600px]:text-[0.85rem] leading-[1.35] text-black/85 text-justify m-0 tracking-[-0.05em] max-[800px]:text-[0.72rem] max-[800px]:leading-[1.3] max-[600px]:text-[0.68rem]">
        Cette carte présente l'accessibilité aux soins en Franche-Comté en 2022, plus précisément pour les professions de kinésithérapeute, infirmiers, sages femmes et médecins généralistes, selon l'indice d'accessibilité potentielle localisée (APL). Les teintes foncées signalent une bonne accessibilité, concentrée autour des grandes villes comme Besançon, Belfort et Montbéliard, tandis que les zones plus claires révèlent une pénurie de professionnels dans les territoires ruraux ou montagneux. Ce contraste met en évidence une forte disparité territoriale entre les zones urbaines bien dotées et les zones rurales souffrant d'un accès limité aux soins de kinésithérapie.
      </p>
    </div>

    <!-- Bloc Sources -->
    <div class="bg-white/5 p-3.5 rounded-lg border-l-[3px] border-[rgb(255,140,66)] max-[800px]:p-3 max-[600px]:p-2">
      <h3 class="text-[1.2rem] font-semibold text-black mb-1.5 max-[800px]:text-sm max-[800px]:mb-1 max-[600px]:text-xs">
        Sources
      </h3>
      <p class="text-[1.1rem] max-[1600px]:text-[0.85rem] leading-[1.35] text-black/85 m-0 tracking-[-0.05em] max-[800px]:text-[0.72rem] max-[800px]:leading-[1.3] max-[600px]:text-[0.68rem]">
        Lien vers la source : <a href="https://data.drees.solidarites-sante.gouv.fr/explore/dataset/530_l-accessibilite-potentielle-localisee-apl/information/" target="_blank" rel="noopener noreferrer" class="text-[rgb(255,140,66)] font-medium no-underline hover:text-[rgb(230,120,50)] hover:underline transition-colors duration-200">data.drees.solidarites-sante.gouv.fr</a>
      </p>
    </div>
  </div>
</Section>

      <!-- Page 3 : Analyse -->
      <Section title="Analyse">
        <div slot="left">
          <PlotFigure
            options={{
              marks: [Plot.dot(penguins, {
                x: "culmen_length_mm",
                y: "culmen_depth_mm",
                stroke: "species",
              })],
            }}
          />
        </div>
        
        <div class="span-two-cols">
          <p>Lorem ipsum dolor sit amet.</p>
          <p>Vestibulum tortor quam.</p>
        </div>
      </Section>


      <!-- Page 4 : Conclusion -->
      <Section title="Conclusion">
        <p>Merci d'avoir exploré nos données !</p>
      </Section>


      <!-- Page 5 : Contact -->
      <Section title="Contact">
        <p>Retrouvez plus d'informations sur notre projet.</p>
      </Section>
    </div>
  </div>

  <!-- Modal HORS de .horizontal-sections pour éviter le problème de transform -->
  <div id="map-modal" class="map-modal" style="display: none;">
    <div class="map-modal-overlay"></div>
    <div class="map-modal-content">
      <button class="map-modal-close" id="close-modal">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      <div class="map-modal-content-inner"></div>
    </div>
  </div>
</Layout>



<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { ScrollToPlugin } from "gsap/ScrollToPlugin";


  gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);


  document.addEventListener("DOMContentLoaded", () => {
    requestAnimationFrame(() => {
      const sections = gsap.utils.toArray(".panel");
      const container = document.querySelector(".horizontal-sections");
      const prevBtn = document.getElementById("prev-btn") as HTMLButtonElement | null;
      const nextBtn = document.getElementById("next-btn") as HTMLButtonElement | null;
      const pageBtns = document.querySelectorAll(".page-btn") as NodeListOf<HTMLButtonElement>;
      
      if (!container || !sections.length || !prevBtn || !nextBtn) {
        console.error("Un élément essentiel est manquant.");
        return;
      }


      console.log(`${sections.length} sections détectées`);


      gsap.from(".hero-content > *", {
        opacity: 0,
        y: 30,
        duration: 1,
        stagger: 0.2,
        ease: "power2.out",
        delay: 0.3
      });


      gsap.from(".hero-image-container", {
        opacity: 0,
        scale: 0.95,
        duration: 1.2,
        ease: "power2.out",
        delay: 0.5
      });


      function updatePageIndicators(currentIndex: number) {
        pageBtns.forEach((btn, index) => {
          if (index === currentIndex) {
            btn.classList.add("active");
          } else {
            btn.classList.remove("active");
          }
        });
      }


      const tween = gsap.to(container, {
        x: () => `-${container.scrollWidth - window.innerWidth}px`,
        ease: "none",
        scrollTrigger: {
          trigger: ".scroll-container",
          start: "top top",
          end: () => `+=${container.scrollWidth - window.innerWidth}`,
          scrub: true,
          pin: true,
          invalidateOnRefresh: true,
          onUpdate: (self) => {
            const currentSection = Math.round(self.progress * (sections.length - 1));
            prevBtn.disabled = currentSection === 0;
            nextBtn.disabled = currentSection === sections.length - 1;
            updatePageIndicators(currentSection);
          },
        },
      });


      setTimeout(() => {
        ScrollTrigger.refresh();
      }, 100);


      let isNavigating = false;


      function goToSection(index: number) {
              if (isNavigating) return;
              isNavigating = true;
      
      
              const progress = index / (sections.length - 1);
              const targetScroll = progress * (document.documentElement.scrollHeight - window.innerHeight);
      
      
              gsap.to(window, {
                scrollTo: { y: targetScroll, autoKill: true },
                duration: 0.8,
                ease: "power2.inOut",
                onComplete: () => { isNavigating = false; },
                onInterrupt: () => { isNavigating = false; },
              });
            }


      prevBtn.addEventListener("click", () => {
        const currentProgress = tween.scrollTrigger?.progress ?? 0;
        const currentSection = Math.round(currentProgress * (sections.length - 1));
        if (currentSection > 0) {
          goToSection(currentSection - 1);
        }
      });


      nextBtn.addEventListener("click", () => {
        const currentProgress = tween.scrollTrigger?.progress ?? 0;
        const currentSection = Math.round(currentProgress * (sections.length - 1));
        if (currentSection < sections.length - 1) {
          goToSection(currentSection + 1);
        }
      });


      pageBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
          const pageIndex = parseInt(btn.getAttribute("data-page") ?? "0", 10);
          goToSection(pageIndex);
        });
      });


      let startX: number, startScroll: number, isDragging = false;
      
      const onDragStart = (e: { target: { closest: (arg0: string) => any; }; clientX: any; touches: { clientX: any; }[]; }) => {
        if (e.target.closest(".arrow-btn") || e.target.closest(".page-btn")) return;
        isDragging = true;
        startX = e.clientX || e.touches[0].clientX;
        startScroll = window.scrollY;
        document.body.classList.add("grabbing");
      };
      
      const onDragMove = (e: { preventDefault: () => void; clientX: any; touches: { clientX: any; }[]; }) => {
        if (!isDragging) return;
        e.preventDefault();
        const currentX = e.clientX || e.touches[0].clientX;
        window.scrollTo(0, startScroll + (startX - currentX) * 2.5);
      };
      
      const onDragEnd = () => {
        if (!isDragging) return;
        isDragging = false;
        document.body.classList.remove("grabbing");
      };


      document.addEventListener("mousedown", onDragStart);
      document.addEventListener("mousemove", onDragMove);
      document.addEventListener("mouseup", onDragEnd);
      document.addEventListener("mouseleave", onDragEnd);


      document.addEventListener("touchstart", onDragStart, { passive: true });
      document.addEventListener("touchmove", onDragMove, { passive: false });
      document.addEventListener("touchend", onDragEnd);
    });
  });
</script>
