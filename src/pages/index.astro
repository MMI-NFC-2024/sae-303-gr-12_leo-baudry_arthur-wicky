---
// On importe les composants nécessaires
import Layout from "../layouts/Layout.astro";
import PlotFigure from "../components/PlotFigure.astro";
import Section from "../components/Section.astro";

import penguins from "../assets/penguins.json";
import * as Plot from "@observablehq/plot";
---

<Layout>
  <div class="scroll-container">
  <div class="horizontal-sections">
    <!-- Page 1 : Introduction au projet -->
    <Section title="Santé en Franche-Comté : visualiser l'accès aux professionnels">
      <p>Scrollez ou glissez pour voir l'effet slider</p>
    </Section>

    <!-- Page 2 : Carte dans colonne 1, Définition et explications dans colonne 2 -->
    <Section title="Données des Pingouins">
      <div slot="left">
        <!-- Graphique -->
        <PlotFigure
          options={{
            marks: [Plot.dot(penguins, {
              x: "culmen_length_mm",
              y: "culmen_depth_mm",
              stroke: "species",
            })],
          }}
        />
      </div>
      <!-- Texte -->
      <div class="span-two-cols">
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt 
           ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation 
           ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat 
          nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia 
          deserunt mollit anim id est laborum.</p>
      </div>
    </Section>

      <!-- Page 3 : Même structure -->
      <Section title="Analyse">
        <div slot="left">
          <PlotFigure
            options={{
              marks: [Plot.dot(penguins, {
                x: "culmen_length_mm",
                y: "culmen_depth_mm",
                stroke: "species",
              })],
            }}
          />
        </div>
        
        <div class="span-two-cols">
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p>
          <p>Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>
        </div>
      </Section>

      <Section title="Conclusion">
        <p>Merci d'avoir exploré nos données !</p>
      </Section>

      <Section title="Contact">
        <p>Retrouvez plus d'informations sur notre projet.</p>
      </Section>
    </div>
  </div>
</Layout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { ScrollToPlugin } from "gsap/ScrollToPlugin";

  gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

  document.addEventListener("DOMContentLoaded", () => {
    // Attendre que le DOM soit complètement rendu
    requestAnimationFrame(() => {
      const sections = gsap.utils.toArray(".panel");
      const container = document.querySelector(".horizontal-sections");
      const prevBtn = document.getElementById("prev-btn");
      const nextBtn = document.getElementById("next-btn");
      const pageBtns = document.querySelectorAll(".page-btn");
      
      if (!container || !sections.length || !prevBtn || !nextBtn) {
          console.error("Un élément essentiel est manquant.", {
            container: !!container,
            sectionsCount: sections.length,
            prevBtn: !!prevBtn,
            nextBtn: !!nextBtn
          });
          return;
      }

      console.log(`${sections.length} sections détectées`);

      // Fonction pour mettre à jour les indicateurs de page
      function updatePageIndicators(currentIndex) {
        pageBtns.forEach((btn, index) => {
          if (index === currentIndex) {
            btn.classList.add("active");
          } else {
            btn.classList.remove("active");
          }
        });
      }

      // --- Animation Principale ---
      const tween = gsap.to(container, {
        x: () => `-${container.scrollWidth - window.innerWidth}px`,
        ease: "none",
        scrollTrigger: {
          trigger: ".scroll-container",
          start: "top top",
          end: () => `+=${container.scrollWidth - window.innerWidth}`,
          scrub: true,
          pin: true,
          invalidateOnRefresh: true,
          onUpdate: (self) => {
            const currentSection = Math.round(self.progress * (sections.length - 1));
            prevBtn.disabled = currentSection === 0;
            nextBtn.disabled = currentSection === sections.length - 1;
            
            // Mettre à jour les indicateurs de page
            updatePageIndicators(currentSection);
          },
        },
      });

      // Rafraîchir ScrollTrigger après initialisation
      setTimeout(() => {
        ScrollTrigger.refresh();
      }, 100);

      // --- Navigation par les flèches ---
      let isNavigating = false;

      function goToSection(index) {
        if (isNavigating) return;
        isNavigating = true;

        const progress = index / (sections.length - 1);
        const targetScroll = progress * (document.documentElement.scrollHeight - window.innerHeight);

        gsap.to(window, {
          scrollTo: { y: targetScroll, autoKill: true },
          duration: 0.8,
          ease: "power2.inOut",
          onComplete: () => isNavigating = false,
          onInterrupt: () => isNavigating = false,
        });
      }

      prevBtn.addEventListener("click", () => {
        const currentProgress = tween.scrollTrigger.progress;
        const currentSection = Math.round(currentProgress * (sections.length - 1));
        if (currentSection > 0) {
          goToSection(currentSection - 1);
        }
      });

      nextBtn.addEventListener("click", () => {
        const currentProgress = tween.scrollTrigger.progress;
        const currentSection = Math.round(currentProgress * (sections.length - 1));
        if (currentSection < sections.length - 1) {
          goToSection(currentSection + 1);
        }
      });

      // --- Navigation par les numéros de page ---
      pageBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
          const pageIndex = parseInt(btn.getAttribute("data-page"));
          goToSection(pageIndex);
        });
      });

      // --- Drag & Drop ---
      let startX, startScroll, isDragging = false;
      
      const onDragStart = e => {
        if (e.target.closest(".arrow-btn") || e.target.closest(".page-btn")) return;
        isDragging = true;
        startX = e.clientX || e.touches[0].clientX;
        startScroll = window.scrollY;
        document.body.classList.add("grabbing");
      };
      
      const onDragMove = e => {
        if (!isDragging) return;
        e.preventDefault();
        const currentX = e.clientX || e.touches[0].clientX;
        window.scrollTo(0, startScroll + (startX - currentX) * 2.5);
      };
      
      const onDragEnd = () => {
        if (!isDragging) return;
        isDragging = false;
        document.body.classList.remove("grabbing");
      };

      document.addEventListener("mousedown", onDragStart);
      document.addEventListener("mousemove", onDragMove);
      document.addEventListener("mouseup", onDragEnd);
      document.addEventListener("mouseleave", onDragEnd);

      document.addEventListener("touchstart", onDragStart, { passive: true });
      document.addEventListener("touchmove", onDragMove, { passive: false });
      document.addEventListener("touchend", onDragEnd);
    });
  });
</script>
